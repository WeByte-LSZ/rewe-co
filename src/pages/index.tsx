import Head from "next/head";
import * as React from "react";
import {
  ListItemDecorator,
  Typography,
} from "@mui/joy";
import { useEffect, useState } from "react";
import {
  KeyboardReturn,
} from "@mui/icons-material";
import SearchModal from "@/components/modal/SearchModal";
import config from "@/../configuration"
import DrawerItem, { DrawerPage } from "@/types/Drawer";
import { Page } from "@/types/Configuration";
import Layout from "@/components/layout/Layout";
import { FuseResult, RangeTuple } from "fuse.js";

function prepareDrawerItems(list: Page[], modalData: { data: object[] }, depthMarker: string = ""): DrawerPage[] {
  depthMarker = (depthMarker.length > 0 ? depthMarker + "/" : "")
  return list.map((e) => {
    modalData.data.push({ id: depthMarker + e.title, icon: e.icon })
    return {
      label: e.title,
      icon: e.icon,
      id: "",
      subItems: prepareDrawerItems(e.subpages, modalData, depthMarker + e.title)
    }
  })
}

/* 
 * Steps to underline
 * substring from 0 to match start
 * substring from match end to end
 * in center is new underlines string
 * work with end of new string
 */
function underlineSearchResults(match: string, indices: readonly RangeTuple[]): (JSX.Element | string)[] {
  let res: (JSX.Element | string)[] = [match];
  let startIndex = 0
  indices.forEach((range) => {
    let start = match.substring(startIndex, range[0]);
    startIndex = range[1] + 1;
    let end = match.substring(startIndex);
    let center = <Typography sx={{ textDecoration: 'underline' }} color='primary'>{match.substring(range[0], range[1] + 1)}</Typography>;
    res[res.length - 1] = start;
    res.push(center);
    res.push(end)
  })
  return res
}

export default function Home() {
  const [modalData, setModalData] = useState<Object[]>([]);
  const [sidebarData, setSidebarData] = useState<DrawerItem[]>([]);
  const [modalVisibility, setSearchModalVisibility] = useState(false);

  useEffect(() => {
    // emulate pass by reference
    setSidebarData(() => {
      let ref: { data: Object[] } = { data: [] }
      const tmp = (config.categories.map((e) => {
        return {
          label: e.title,
          subItems: prepareDrawerItems(e.pages, ref)
        }
      }))
      setModalData(ref.data);
      return tmp;
    })
  }, [])

  return (
    <>
      <Head>
        <title>{config.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Layout
          sidebarData={sidebarData}
          toggleSearchModalVisibility={() => { setSearchModalVisibility((old) => !old) }}
          breadcrumbsPath={[]}
        />
        <SearchModal title="Search"
          visibility={modalVisibility}
          setVisibility={setSearchModalVisibility}
          dataPoints={modalData}
          setDatapoints={() => { }}
          keys={['id']}
          setKeys={() => { }}
          dataToBeDisplayed={(e: FuseResult<any>, isHovered: boolean) => (
            <>
              <ListItemDecorator sx={{ justifyContent: 'flex-start' }}>
                {e.item.icon}
              </ListItemDecorator>
              {
                <Typography sx={{ color: isHovered ? 'primary.plainColor' : 'text.primary' }}>
                  {underlineSearchResults(e.item.id, (e.matches) ? e.matches[0].indices : [])}
                </Typography>
              }
              <ListItemDecorator sx={{ display: isHovered ? 'inline-flex' : 'none', justifyContent: 'flex-end', flexGrow: 1, paddingX: 1.5 }}>
                <KeyboardReturn />
              </ListItemDecorator>
            </>
          )} />
      </main>
    </>
  );
}
